/// <reference types="node" />
import * as CMTypes from "../typescript-node-client/api";
import http = require('http');
export declare type Channel = "SMS" | "Viber" | "RCS" | "Apple Business Chat" | "WhatsApp" | "Twitter" | "MobilePush" | "Facebook Messenger" | "Google Business Messages" | "Instagram";
export declare type RichMessage = CMTypes.RichMessage;
export declare type Suggestion = CMTypes.Suggestion;
export declare type Template = CMTypes.Template;
export declare type MessagesResponse = CMTypes.MessagesResponse;
/**
 * Message client for the CM.com Platform
 */
export declare class MessageApiClient {
    private readonly productToken;
    /**
     * Create a new client instance with a provided authentication key
     * @param productToken Private autorization token for CM.com
     */
    constructor(productToken: string);
    /**
     * Create a new message builder
     */
    createMessage(): Message;
    /**
     * @deprecated use .sendTextMessages(...) instead
     */
    SendTextMessage(to: string, from: string, message: string, reference?: string): Promise<{
        body: CMTypes.MessagesResponse;
        response: http.IncomingMessage;
    }>;
    /**
     * @deprecated use .sendTextMessages(...) instead
     */
    SendTextMessages(to: string[], from: string, message: string, reference?: string): Promise<{
        body: CMTypes.MessagesResponse;
        response: http.IncomingMessage;
    }>;
    /**
     * Send an SMS message
     * @param to array of recipients for the message, specify the numbers in international format with leading 00
     * For Twitter: use the Twitter Snowflake ID
     * @param from the sender of the message, specify valid Sender ID.
     * For Twitter: use the Twitter Snowflake ID of the account you want to use as sender.
     * @param message the body of the SMS message to be sent
     * @param reference (optional) reference to the message to query it later in the CM.platform.
     */ sendTextMessage(to: string[], from: string, message: string, reference?: string): Promise<{
        body: CMTypes.MessagesResponse;
        response: http.IncomingMessage;
    }>;
}
/**
 * Message object to send via the CM.com platform
 */
export declare class Message extends CMTypes.MessageEnvelope {
    private api;
    /**
     * @deprecated Please use the MessageApiClient.createMessage instead.
     */
    constructor(productToken: string);
    /**
     * Sets the essential message parameters.
     * @param to array of recipients for the message, specify the numbers in international format with leading 00.
     * For Twitter: use the Twitter Snowflake ID
     * @param from the sender of the message, specify valid Sender ID.
     * For Twitter: use the Twitter Snowflake ID of the account you want to use as sender.
     * @param message the body of the SMS message to be sent
     * @param reference (optional) reference to the message to query it later in the CM.platform.
     */
    setMessage(to: string[], from: string, message: string, reference?: string): Message;
    /**
     * Sets the allowed channels to use. Default is to allow any channel configured for your account
     * @param channels array of allowed channels.
     * Any of "SMS", "Viber", "RCS", "Apple Business Chat", "WhatsApp" and "Twitter"
     */
    setAllowedChannels(channels: Channel[]): Message;
    /**
     * Sets the rich message conversation
     * @param conversation array of rich message conversation objects
     */
    setConversation(conversation: RichMessage[]): Message;
    /**
    * Sets the rich message suggestions
    * @param conversation array of rich message suggestion objects
    */
    setSuggestion(suggestions: Suggestion[]): Message;
    /**
     * Sets the rich message template
     * @param template template definition and usage object
     */
    setTemplate(template: Template): Message;
    /**
     * Sends the message to the CM.com Platform
     */
    send(): Promise<{
        body: MessagesResponse;
        response: http.IncomingMessage;
    }>;
    private createRecipients;
    private getRichContent;
}
export { CMTypes };
