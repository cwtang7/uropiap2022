"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CMTypes = exports.Message = exports.MessageApiClient = void 0;
var CMTypes = require("../typescript-node-client/api");
exports.CMTypes = CMTypes;
/**
 * Message client for the CM.com Platform
 */
var MessageApiClient = /** @class */ (function () {
    /**
     * Create a new client instance with a provided authentication key
     * @param productToken Private autorization token for CM.com
     */
    function MessageApiClient(productToken) {
        this.productToken = productToken;
    }
    /**
     * Create a new message builder
     */
    MessageApiClient.prototype.createMessage = function () {
        return new Message(this.productToken);
    };
    /**
     * @deprecated use .sendTextMessages(...) instead
     */
    MessageApiClient.prototype.SendTextMessage = function (to, from, message, reference) {
        if (reference === void 0) { reference = undefined; }
        return this.SendTextMessages([to], from, message, reference);
    };
    /**
     * @deprecated use .sendTextMessages(...) instead
     */
    MessageApiClient.prototype.SendTextMessages = function (to, from, message, reference) {
        if (reference === void 0) { reference = undefined; }
        return this.sendTextMessage(to, from, message, reference);
    };
    /**
     * Send an SMS message
     * @param to array of recipients for the message, specify the numbers in international format with leading 00
     * For Twitter: use the Twitter Snowflake ID
     * @param from the sender of the message, specify valid Sender ID.
     * For Twitter: use the Twitter Snowflake ID of the account you want to use as sender.
     * @param message the body of the SMS message to be sent
     * @param reference (optional) reference to the message to query it later in the CM.platform.
     */ MessageApiClient.prototype.sendTextMessage = function (to, from, message, reference) {
        if (reference === void 0) { reference = undefined; }
        return this
            .createMessage()
            .setMessage(to, from, message, reference)
            .send();
    };
    return MessageApiClient;
}());
exports.MessageApiClient = MessageApiClient;
/**
 * Message object to send via the CM.com platform
 */
var Message = /** @class */ (function (_super) {
    __extends(Message, _super);
    /**
     * @deprecated Please use the MessageApiClient.createMessage instead.
     */
    function Message(productToken) {
        var _this = _super.call(this) || this;
        _this.api = new CMTypes.MessagesApi();
        _this.messages = new CMTypes.Messages();
        _this.messages.authentication = new CMTypes.Authentication();
        _this.messages.authentication.productToken = productToken;
        return _this;
    }
    /**
     * Sets the essential message parameters.
     * @param to array of recipients for the message, specify the numbers in international format with leading 00.
     * For Twitter: use the Twitter Snowflake ID
     * @param from the sender of the message, specify valid Sender ID.
     * For Twitter: use the Twitter Snowflake ID of the account you want to use as sender.
     * @param message the body of the SMS message to be sent
     * @param reference (optional) reference to the message to query it later in the CM.platform.
     */
    Message.prototype.setMessage = function (to, from, message, reference) {
        if (reference === void 0) { reference = undefined; }
        var msg = new CMTypes.Message();
        msg.customGrouping = "text-sdk-javascript";
        msg.from = from;
        msg.body = new CMTypes.MessageBody();
        msg.body.type = "AUTO";
        msg.body.content = message;
        msg.reference = reference;
        msg.to = this.createRecipients(to);
        this.messages.msg = new Array();
        this.messages.msg.push(msg);
        return this;
    };
    /**
     * Sets the allowed channels to use. Default is to allow any channel configured for your account
     * @param channels array of allowed channels.
     * Any of "SMS", "Viber", "RCS", "Apple Business Chat", "WhatsApp" and "Twitter"
     */
    Message.prototype.setAllowedChannels = function (channels) {
        this.messages.msg[0].allowedChannels = channels || [];
        return this;
    };
    /**
     * Sets the rich message conversation
     * @param conversation array of rich message conversation objects
     */
    Message.prototype.setConversation = function (conversation) {
        this.getRichContent().conversation = conversation;
        return this;
    };
    /**
    * Sets the rich message suggestions
    * @param conversation array of rich message suggestion objects
    */
    Message.prototype.setSuggestion = function (suggestions) {
        this.getRichContent().suggestions = suggestions;
        return this;
    };
    /**
     * Sets the rich message template
     * @param template template definition and usage object
     */
    Message.prototype.setTemplate = function (template) {
        this.getRichContent().conversation = [{ template: template }];
        return this;
    };
    /**
     * Sends the message to the CM.com Platform
     */
    Message.prototype.send = function () {
        return this.api.messagesSendMessage(this);
    };
    Message.prototype.createRecipients = function (recipients) {
        return recipients.map(function (number) {
            var recipient = {
                number: number
            };
            return recipient;
        });
    };
    Message.prototype.getRichContent = function () {
        if (!this.messages.msg[0].richContent) {
            this.messages.msg[0].richContent = new CMTypes.RichContent();
        }
        return this.messages.msg[0].richContent;
    };
    return Message;
}(CMTypes.MessageEnvelope));
exports.Message = Message;
//# sourceMappingURL=MessageApiClient.js.map