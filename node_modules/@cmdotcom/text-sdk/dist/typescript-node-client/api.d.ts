/**
 * Bulk SMS API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/// <reference types="node" />
import localVarRequest = require('request');
import http = require('http');
import Promise = require('bluebird');
/**
* Contains information for a {CM.Messaging.RCSModels.Models.Suggestion.Calendar} (RCS).
*/
export declare class Calendar {
    /**
    * The start of the appointment.
    */
    'startTime'?: Date;
    /**
    * The end of the appointment.
    */
    'endTime'?: Date;
    /**
    * The description which will appear in the calendar app
    */
    'description'?: string;
    /**
    * The title of the appointment which will appear in the calendar app
    */
    'title'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Options to select a calendar
*/
export declare class CalendarPicker {
    /**
    * The options to select.
    */
    'options'?: Array<Calendar>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* A carousel contains two or more RichCards
*/
export declare class Carousel {
    /**
    * The width for the items of the carousel: options are Small or Medium
    */
    'cardWidth'?: Carousel.CardWidthEnum;
    /**
    * The cards of the carousel
    */
    'cards'?: Array<RichCard>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace Carousel {
    enum CardWidthEnum {
        Small,
        Medium
    }
}
/**
* Represents 1 contact
*/
export declare class Contact {
    /**
    * Contact address(es)
    */
    'addresses'?: Array<ContactAddress>;
    /**
    * Contact email address(es)
    */
    'emails'?: Array<ContactEmail>;
    /**
    * Full contact name
    */
    'name'?: ContactName;
    /**
    * Contact organization information
    */
    'org'?: ContactOrganization;
    /**
    * Contact phone number(s)
    */
    'phones'?: Array<ContactPhoneNumber>;
    /**
    * Contact URL(s)
    */
    'urls'?: Array<ContactUrl>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* One address of a contact  See also https://developers.facebook.com/docs/whatsapp/api/messages/others#contacts
*/
export declare class ContactAddress {
    /**
    * City name
    */
    'city'?: string;
    /**
    * Full country name
    */
    'country'?: string;
    /**
    * Two-letter country abbreviation
    */
    'countryCode'?: string;
    /**
    * State abbreviation
    */
    'state'?: string;
    /**
    * Street number and name
    */
    'street'?: string;
    /**
    * Standard Values: HOME, WORK
    */
    'type'?: string;
    /**
    * ZIP code
    */
    'zip'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contact email address  See also https://developers.facebook.com/docs/whatsapp/api/messages/others#contacts
*/
export declare class ContactEmail {
    /**
    * Email address
    */
    'email'?: string;
    /**
    * Standard Values: HOME, WORK
    */
    'type'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* The name of a contact.  See also https://developers.facebook.com/docs/whatsapp/api/messages/others#contacts
*/
export declare class ContactName {
    /**
    * First name
    */
    'firstName'?: string;
    /**
    * Last name
    */
    'lastName'?: string;
    /**
    * Middle name
    */
    'middleName'?: string;
    /**
    * Name prefix
    */
    'namePrefix'?: string;
    /**
    * Name suffix
    */
    'nameSuffix'?: string;
    /**
    * Full name as it normally appears
    */
    'formattedName'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* The organization of a contact  See also https://developers.facebook.com/docs/whatsapp/api/messages/others#contacts
*/
export declare class ContactOrganization {
    /**
    * Name of the contact's company
    */
    'company'?: string;
    /**
    * Name of the contact's department
    */
    'department'?: string;
    /**
    * Contact's business title
    */
    'title'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Phone number of a contact
*/
export declare class ContactPhoneNumber {
    /**
    * The phone number of the contact
    */
    'phone'?: string;
    /**
    * Standard Values: CELL, MAIN, IPHONE, HOME, WORK
    */
    'type'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* An Url for a contact  See also https://developers.facebook.com/docs/whatsapp/api/messages/others#contacts
*/
export declare class ContactUrl {
    /**
    * URL
    */
    'url'?: string;
    /**
    * Standard Values: HOME, WORK
    */
    'type'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contains information for a {CM.Messaging.RCSModels.Models.Suggestion.Dial}
*/
export declare class Dial {
    /**
    * The number to call (in international format)
    */
    'phoneNumber'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  The language parameter sets the language policy for an Message Template;  you can set it to either fallback or deterministic.
*/
export declare class Language {
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  The code of the language or locale to use â€” Accepts both language and language_locale formats (e.g., en and en_US).
    */
    'code'?: string;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  Options: fallback, deterministic  The language policy the message should follow
    */
    'policy'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class LineItem {
    'label'?: string;
    'subText'?: string;
    'type'?: string;
    'amount'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  This field is an array of values to apply to variables in the template
*/
export declare class LocalizableParam {
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates    Default text if localization fails
    */
    '_default'?: string;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates    If the currency object is used, it contains required parameters currency_code and amount_1000.
    */
    'currency'?: any;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates    If the date_time object is used, further definition of the date and time is required.
    */
    'dateTime'?: any;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Object containing information about an image, a video, an audio file or a document.
*/
export declare class Media {
    /**
    * The name of the item
    */
    'mediaName'?: string;
    /**
    * The location of the media item, should be available over the internet
    */
    'mediaUri'?: string;
    /**
    * The mime type of the media item
    */
    'mimeType'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class OAuthMessage {
    'responseType'?: string;
    'state'?: string;
    'responseEncryptionKey'?: string;
    'clientSecret'?: string;
    'scope'?: Array<string>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class Payment {
    'merchantIdentifier'?: string;
    'merchantName'?: string;
    'lineItems'?: Array<LineItem>;
    'currencyCode'?: string;
    'countryCodes'?: Array<string>;
    'billingAddressRequired'?: boolean;
    'shippingContactRequired'?: boolean;
    'merchantSession'?: any;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* A rich card, which can be used to display media, text and images in RCS
*/
export declare class RichCard {
    /**
    * A plain text message, when used it replaces the 'SMS' body text.  In RCS, when used in combination with an header and/or media this  will be set as the text of a rich card.
    */
    'text'?: string;
    /**
    * Optional: the header for a rich card
    */
    'header'?: string;
    /**
    * A image or video for a message. In RCS, this can be used in combination with  an header and/or text to create a rich card.
    */
    'media'?: Media;
    /**
    * Suggestions, used in channels that support these, such as RCS
    */
    'suggestions'?: Array<Suggestion>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare class RichContent {
    /**
    * The messages to send.
    */
    'conversation'?: Array<RichMessage>;
    /**
    * Suggestions, used in channels that support these, such as RCS.
    */
    'suggestions'?: Array<Suggestion>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* A regular text message, replaces the Msg Body for channels  that support rich content (all channels except SMS, Voice  and Push at this moment)
*/
export declare class RichMessage {
    /**
    * A plain text message, when used it replaces the 'SMS' body text.  In RCS, when used in combination with an header and/or media this  will be set as the text of a rich card.
    */
    'text'?: string;
    /**
    * Optional: the header for a rich card
    */
    'header'?: string;
    /**
    * A image or video for a message. In RCS, this can be used in combination with  an header and/or text to create a rich card.
    */
    'media'?: Media;
    /**
    * Contains the rich cards of a carousel.
    */
    'carousel'?: Carousel;
    /**
    * Suggestions, used in channels that support these, such as RCS.
    */
    'suggestions'?: Array<Suggestion>;
    /**
    * A template, used in WhatsApp messages.
    */
    'template'?: Template;
    /**
    * Used to send a location, supported by (most) RCS connections  and WhatsApp.
    */
    'location'?: ViewLocation;
    /**
    * Used to send one or multiple contacts (in WhatsApp).
    */
    'contacts'?: Array<Contact>;
    /**
    * Used to send an (OAuth2) authentication request.
    */
    'oauth2'?: OAuthMessage;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Requests the received to share his/her location
*/
export declare class ShareLocation {
    /**
    * Specifies that we request the location
    */
    'requestLocation'?: boolean;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Represents a suggestion to send to the user
*/
export declare class Suggestion {
    /**
    * The action which needs to be taken.
    */
    'action'?: string;
    /**
    * The text the end user will see
    */
    'label'?: string;
    /**
    * Data which will be sent back in a MO ({CM.Messaging.RCSModels.Models.Suggestion.Label} will be used  if not specified)
    */
    'postbackdata'?: string;
    /**
    * The url the end user can open.  Used in an 'OpenUrl' suggestion {CM.Messaging.RCSModels.Models.Suggestion.Action}.
    */
    'url'?: string;
    /**
    * When the user clicks on the icon, it opens the calendar app of the user to  add the new appointment.  Used in an 'CreateCalendarEvent' suggestion {CM.Messaging.RCSModels.Models.Suggestion.Action}.
    */
    'calendar'?: Calendar;
    /**
    * When the user clicks on this suggestion, it opens a calendar picker.
    */
    'calendarPicker'?: CalendarPicker;
    /**
    * When the user clicks on this suggestion, it starts the call app.  Used in a 'Dial' suggestion {CM.Messaging.RCSModels.Models.Suggestion.Action}.
    */
    'dial'?: Dial;
    /**
    * When the user clicks on this suggestion, it will show a location.  Used in a 'viewLocation' suggestion {CM.Messaging.RCSModels.Models.Suggestion.Action}.
    */
    'viewLocation'?: ViewLocation;
    /**
    * When the user clicks on this suggestion, he/she can share the current location.  Used in a 'ShareLocation' suggestion {CM.Messaging.RCSModels.Models.Suggestion.Action}.
    */
    'shareLocation'?: ShareLocation;
    /**
    * If set and supported this media can be used as a thumbnail.
    */
    'media'?: Media;
    /**
    * If pre-configured and supported sets up the payment.
    */
    'payment'?: Payment;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Used to send a template message, at this moment only supported in WhatsApp
*/
export declare class Template {
    /**
    * The WhatsApp template message
    */
    'whatsapp'?: WhatsappTemplate;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* A location in a message or suggestion.
*/
export declare class ViewLocation {
    /**
    * The latitude in degrees
    */
    'latitude'?: number;
    /**
    * The longitude in degrees
    */
    'longitude'?: number;
    /**
    * The label to display at the pin in a map.
    */
    'label'?: string;
    /**
    * Search for this location instead of using the latitude/longitude.
    */
    'searchQuery'?: string;
    /**
    * Can be used in some RCS connections to display a radius instead of only a pointer
    */
    'radius'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Dynamic content of the message. Separated in in different sections.
*/
export declare class Component {
    /**
    * Required, describes the component type. Possible values: header, content, footer.
    */
    'type'?: string;
    /**
    * Can be empty. Array containing the dynamic content of the message.
    */
    'parameters'?: Array<ComponentParameter>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Dynamic content of a media template message.
*/
export declare class ComponentParameter {
    /**
    * Describes the parameter type. Possible values: text, currency, date_time, image, document.
    */
    'type'?: string;
    'text'?: string;
    'image'?: Media;
    /**
    * Note: Only PDF documents are currently supported for media message templates.
    */
    'document'?: Media;
    'currency'?: any;
    'dateTime'?: any;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Whatsapp template, see https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  for more information
*/
export declare class WhatsappTemplate {
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  The namespace that will be used
    */
    'namespace'?: string;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  The element name that indicates which template to use within the namespace
    */
    'elementName'?: string;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  Allows for the specification of a deterministic or fallback language.    The language parameter sets the language policy for an Message Template;  you can set it to either fallback or deterministic.
    */
    'language'?: Language;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates  This field is an array of values to apply to variables in the template
    */
    'localizableParams'?: Array<LocalizableParam>;
    /**
    * Source: https://developers.facebook.com/docs/whatsapp/api/messages/message-templates/media-message-templates  This field is an array of components to apply to variables in the template
    */
    'components'?: Array<Component>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Authentication
*/
export declare class Authentication {
    /**
    * Required: This is the product token for authentication. Visit https://gateway.cmtelecom.com to retrieve your product token.   Example: 00000000-0000-0000-0000-000000000000'
    */
    'productToken'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* The message
*/
export declare class Message {
    /**
    * Required. This is the sender name. The maximum length is 11 alphanumerical characters or 16 digits. Example: 'CM Telecom'
    */
    'from'?: string;
    /**
    * Required. This contains the message text.
    */
    'body'?: MessageBody;
    /**
    * To send messages longer than 160 characters you need to send them as multipart message (also called concatenated messages). We will cut the message into more smaller messages and the phone will paste them together again. You will need to add a minimum and maximum of message parts using this parameter and {CM.Sms.Server.HttpMTGatewayDocsWebsite.Models.Message.MaximumNumberOfMessageParts}
    */
    'minimumNumberOfMessageParts'?: number;
    /**
    * To send messages longer than 160 characters you need to send them as multipart message (also called concatenated messages). We will cut the message into more smaller messages and the phone will paste them together again. You will need to add a minimum and maximum of message parts using this parameter and {CM.Sms.Server.HttpMTGatewayDocsWebsite.Models.Message.MinimumNumberOfMessageParts}
    */
    'maximumNumberOfMessageParts'?: number;
    /**
    * Here you can include your message reference. This information will be returned in a status report so you can match the message and it's status. Restrictions: 1 - 32 alphanumeric characters.
    */
    'reference'?: string;
    /**
    * Required. This is the destination mobile number.   Restrictions: this value should be in international format. A single mobile number per request. Example: '00447911123456'
    */
    'to'?: Array<Recipient>;
    /**
    * The custom grouping field is an optional field that can be used to tag messages. These tags will be used by other CM products, like the Transactions API. Despite not being immediately visible to you yet, custom groupings can already be assigned.  Applying custom grouping names to messages helps filter your messages.With up to three levels of custom grouping fields that can be set, subsets of messages can be further broken down. The custom grouping name can be up to 100 characters of your choosing.  Itâ€™s recommended to limit the number of unique custom groupings to 1000. Please contact support in case you would like to exceed this number.
    */
    'customGrouping'?: string;
    /**
    * The allowed channels field forces a message to only use certain routes.  In this field you can define a list of which channels you want your message to use.  Not defining any channels will be interpreted as allowing all channels.
    */
    'allowedChannels'?: Array<string>;
    /**
     * Can be used by channels that support rich content (all channels except SMS, Voice and Push at this moment)
     */
    'richContent'?: RichContent;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contains the body of the message.
*/
export declare class MessageBody {
    /**
    * Required. This is the message text.   For GSM7-encoded messages 1 message can contain up to 160 characters, for multipart messages, 1 message can contain up to 153 characters (the other bytes are used to define the multipart messages)    For Unicode-encoded messages 1 message can contain up to 70 characters, for multipart messages, 1 message can contain up to 66 characters per message    Unicode messages are sent using UTF-16, so they usually will be 2 bytes long (and certain characters will be send as multiple characters, but I hope we donâ€™t need to discuss that here).     In theory a message can contain 255 message parts, so in theory the maximum length is 39.015. In practice we advise to limit the amount of parts to 8, so either 1224 or 528 characters
    */
    'content'?: string;
    /**
    * It possible to let our gateway do the encoding detection for you, by setting the type to \"AUTO\"  In case it detects characters that are not part of the GSM character set, the message will be delivered as Unicode.   Any existing DCS value will be ignored.   If the message contains more than 70 characters in Unicode format it will be split into a multipart message.   You can limit the number of parts by setting the maximum number of message parts (see also the section on Multipart below).
    */
    'type'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Envelope containing messages and authentication
*/
export declare class MessageEnvelope {
    'messages'?: Messages;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Response for an individual message
*/
export declare class MessageResponse {
    /**
    * Maps to the 'to' of the request
    */
    'to'?: string;
    /**
    * The status of the message, usually either \"Accepted\" or \"Rejected\"
    */
    'status'?: string;
    /**
    * Optional: If a reference was supplied in the request, it is returned here.
    */
    'reference'?: string;
    /**
    * The number of message parts that are sent
    */
    'parts'?: number;
    /**
    * Optional: Human readable details about this message.
    */
    'messageDetails'?: string;
    /**
    * The error code, see https://docs.cmtelecom.com/all-messaging-api/v1.0#send_a_message|responses_&amp;_errors for more details.
    */
    'messageErrorCode'?: number;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* The message(s) to send
*/
export declare class Messages {
    /**
    * Required: This contains the product token for authentication.
    */
    'authentication'?: Authentication;
    /**
    * Required. The msg-object signals a message and should comprise of at least a from, to and body-tag. One HTTP-call can support up to 1000 msg objects.
    */
    'msg'?: Array<Message>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Response from a Message POST
*/
export declare class MessagesResponse {
    /**
    * Human readable text such as: Created 1 message(s)
    */
    'details'?: string;
    /**
    * The error code, see https://docs.cmtelecom.com/all-messaging-api/v1.0#send_a_message|responses_&amp;_errors for more details.
    */
    'errorCode'?: number;
    /**
    * Detailed information per message
    */
    'messages'?: Array<MessageResponse>;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
/**
* Contains the  mobile number in international format.
*/
export declare class Recipient {
    /**
    * Required. This is the destination mobile number.   Restrictions: this value should be in international format. A single mobile number per request. Example: '00447911123456'
    */
    'number'?: string;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export interface Authentication {
    /**
    * Apply authentication settings to header and query params.
    */
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class HttpBasicAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class ApiKeyAuth implements Authentication {
    private location;
    private paramName;
    apiKey: string;
    constructor(location: string, paramName: string);
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class OAuth implements Authentication {
    accessToken: string;
    applyToRequest(requestOptions: localVarRequest.Options): void;
}
export declare class VoidAuth implements Authentication {
    username: string;
    password: string;
    applyToRequest(_: localVarRequest.Options): void;
}
export declare enum MessagesApiApiKeys {
}
export declare class MessagesApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    constructor(basePath?: string);
    set useQuerystring(value: boolean);
    set basePath(basePath: string);
    get basePath(): string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: MessagesApiApiKeys, value: string): void;
    /**
     *
     * @summary CM's Messaging Gateway enables you to send text messages to mobile phones all around the world in very high volume.                            The Messaging Gateway API covers the interface between your application and the CM Platform by means of the HTTP protocol. Only bulk (free of charge for the end user) text messages are supported.
     * @param message
     * @param {*} [options] Override http request options.
     */
    messagesSendMessage(message: MessageEnvelope, options?: any): Promise<{
        response: http.IncomingMessage;
        body: MessagesResponse;
    }>;
}
